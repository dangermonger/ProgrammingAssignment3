newdata <- order(df[3])
newdata
newdata <- df(order(item))
newdata
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(1,4,6,3,8,3,5,7,9))
df
newdata <- df(order(item))
newdata
newdata <- df[order(item),]
newdata
newdata <- df[order(item),]
newdata
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(1,4,6,3,8,3,5,7,9))
df
newdata <- df[order(count),]
newdata
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(1,4,6,3,8,3,5,7,9))
df
newdata <- df[order(df$count),]
newdata
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(1,4,6,3,8,3,5,7,9))
##df
newdata <- df[order(df$count, df$item),] ##this will order the table by the count column
##ordered_loop <- order(df[3], df$Hospital.Name)
newdata
newdata <- order(df$count, df$item)
newdata
df
df$count[newdata[1]]
str(df$count[newdata[1]])
newdata <- order(df$count, df$item)
##ordered_loop <- order(df[3], df$Hospital.Name)
newdata
newdata <- df[order(df$count, df$item),]
newdata
df
df$count[newdata[3]]
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(1,4,6,3,8,3,5,7,9))
df
newdata <- df[order(df$count, df$item),] ##this will order the table by the count column then the item column
newdata <- order(df$count, df$item)##this gives the row numbers of the ordered dataframe
##ordered_loop <- order(df[3], df$Hospital.Name)
newdata
df
df$count[newdata[3]]
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(27:35))
df
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
df
newdata <- df[order(df$count, df$item),]
newdata
newdata <- order(df$count, df$item)
newdata
newdata <- order(df$[3], df$item)#
newdata <- order(df[3], df$item)
newdata
newdata <- df[order(df[3], df$item),]
newdata
newdata
newdata <- order(df[3], df$item)
newdata
newdata <- order(df[3], df$item)
tryagain <- df[newdata]
tryagain <- df[newdata[3]]
tryagain
tryagain <- df[newdata[2]]
tryagain
tryagain <- df[newdata[1]]
tryagain
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
newdata <- order(df[3], df$item)
df$year[newdata[1]]
rankall <- function(outcome, num = "best") {
original_dataframe <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column_namer <- if (outcome == "heart attack") { ##if input is "heart attack", column_namer is assigned to the following...
suppressWarnings(original_dataframe[, 11] <- as.numeric(original_dataframe[, 11]))## the 11th column (heart attack) of original_dataframe is converted to numeric formatting while suppressing NA coersion warnings
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"## column_namer is assigned to the heart attack column heading name
} else if (outcome == "heart failure") {
suppressWarnings(original_dataframe[, 17] <- as.numeric(original_dataframe[, 17]))
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
suppressWarnings(original_dataframe[, 23] <- as.numeric(original_dataframe[, 23]))
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state_split <- split(original_dataframe[, c("Hospital.Name", "State", column_namer)], original_dataframe$State) ##splits the three column subset of original_dataframe by state
##str(state_split) is a list of 54 dataframes
order_and_checker <- function(looped_state_split, num) { ##takes a looped state.split dataframe and num from pre_result lapply
##str(looped_state_split) is a looped series of dataframes passed to the order_and_checker function
ordered_loop <- order(looped_state_split[3], looped_state_split$Hospital.Name,  na.last=NA) ## ordered_loop coerces into a list an ordered a single column dataframe from the third column of looped_state_split (death rate) and then orders by hospital name and then removes NAs.
##str(ordered_loop) is a looped series of integers of the hospitals rank by state
if (num == "best") {##if inputted num is "best"...
looped_state_split$Hospital.Name[ordered_loop[1]]##creates a single column dataframe from the first column of ordered_loop
} else if (num == "worst") {
looped_state_split$Hospital.Name[ordered_loop[length(ordered_loop)]]
} else if (is.numeric(num)) {
looped_state_split$Hospital.Name[ordered_loop[num]]
} else {
stop("invalid num")
}
}
pre_result <- lapply(state_split, order_and_checker, num) ##lapply passes the list of state_split dataframes, along with the inputted num, to the order_and_checker function
str(pre_result)
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))##creates a dataframe where the first column is named hosptial and is the unlisted with two columns, 'hosptial' and 'state', taking row names from the preresult list.
}
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
df <- data.frame(item = (18:10),
year = rep(c('2010','2011','2012'), each=3),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
newdata <- order(df[3], df$item)##this
df$year[newdata[1]]
df$year[newdata[2]]
df$year[newdata[3]]
df$year[newdata[1]]
df$year[newdata[2]]
df$year[newdata[3]]
df <- data.frame(item = (18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
newdata <- order(df[3], df$item)##t
df[newdata]
newdata
df[newdata[1]]
df[newdata[2]]
df[newdata[3]]
df <- data.frame(item = (18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
df
newdata <- df[order(df[3], df$item),]
newdata
twodata <- df[newdata]
newdata
df <- data.frame(item = (18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
df <- data.frame(item = (18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
newdata <- order(df[3], df$item)##this orde
newdata
something <- df$year[newdata[3]]
something
df$year[newdata[3]]
newdata
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = c(27, 27, 27, 29, 30, 34, 38, 39, 40))
df
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:40)
df
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:40)
df
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:40))
df
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:40))
df
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:35))
df
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:45))
df
df <- data.frame(item = sample(18:10),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:35))
df
df <- data.frame(item = sample(a:i),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:35))
df
df <- data.frame(item = sample(letters(1:8)),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:35))
df
df <- data.frame(item = sample(letters[1:8]),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:35))
df
df <- data.frame(item = sample(letters[1:9]),
year = c('2010','2011','2012', '2013', '2014', '2015', '2016', '2017', '2018'),
count = sample(27:35))
df
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = sample(27:35))
df
newdata <- df[order(df[3], df$item),]
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = sample(27:35))
newdata <- df[order(df[3], df$item),] ##
newdata
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = sample(27:35))
df
df[order(df[3], df$item),]
rankall <- function(outcome, num = "best") {
original_dataframe <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column_namer <- if (outcome == "heart attack") { ##if input is "heart attack", column_namer is assigned to the following...
suppressWarnings(original_dataframe[, 11] <- as.numeric(original_dataframe[, 11]))## the 11th column (heart attack) of original_dataframe is converted to numeric formatting while suppressing NA coersion warnings
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"## column_namer is assigned to the heart attack column heading name
} else if (outcome == "heart failure") {
suppressWarnings(original_dataframe[, 17] <- as.numeric(original_dataframe[, 17]))
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
suppressWarnings(original_dataframe[, 23] <- as.numeric(original_dataframe[, 23]))
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state_split <- split(original_dataframe[, c("Hospital.Name", "State", column_namer)], original_dataframe$State) ##splits the three column subset of original_dataframe by state
##str(state_split) is a list of 54 dataframes divided by state
print(state_split)
order_and_checker <- function(looped_state_split, num) { ##takes a looped state.split dataframe and num from pre_result lapply
##str(looped_state_split) is a looped series of dataframes passed to the order_and_checker function
ordered_loop <- order(looped_state_split[3], looped_state_split$Hospital.Name,  na.last=NA) ## each looped_state_split dataframe is ordered by death rate and hostpital name and NAs are removed.
##str(ordered_loop) is a looped series of integers representing the row numbers of the ordered dataframes
if (num == "best") {##if inputted num is "best"...
looped_state_split$Hospital.Name[ordered_loop[1]]##creates a single column dataframe from the first column of ordered_loop
} else if (num == "worst") {
looped_state_split$Hospital.Name[ordered_loop[length(ordered_loop)]]
} else if (is.numeric(num)) {
looped_state_split$Hospital.Name[ordered_loop[num]]## hosptial names ordered rows
} else {
stop("invalid num")
}
}
pre_result <- lapply(state_split, order_and_checker, num) ##lapply passes the list of state_split dataframes, along with the inputted num, to the order_and_checker function
##str(pre_result) is a list of 54 hospitals by state where the rank is equal to the inputted number
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))##dataframe where the first column 'hospital' is the unlisted pre_result, the 2nd column and row names are derived from named attributes (states) in preresult.
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
original_dataframe <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column_namer <- if (outcome == "heart attack") { ##if input is "heart attack", column_namer is assigned to the following...
suppressWarnings(original_dataframe[, 11] <- as.numeric(original_dataframe[, 11]))## the 11th column (heart attack) of original_dataframe is converted to numeric formatting while suppressing NA coersion warnings
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"## column_namer is assigned to the heart attack column heading name
} else if (outcome == "heart failure") {
suppressWarnings(original_dataframe[, 17] <- as.numeric(original_dataframe[, 17]))
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
suppressWarnings(original_dataframe[, 23] <- as.numeric(original_dataframe[, 23]))
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state_split <- split(original_dataframe[, c("Hospital.Name", "State", column_namer)], original_dataframe$State) ##splits the three column subset of original_dataframe by state
##str(state_split) is a list of 54 dataframes divided by state
print((state_split), 10)
order_and_checker <- function(looped_state_split, num) { ##takes a looped state.split dataframe and num from pre_result lapply
##str(looped_state_split) is a looped series of dataframes passed to the order_and_checker function
ordered_loop <- order(looped_state_split[3], looped_state_split$Hospital.Name,  na.last=NA) ## each looped_state_split dataframe is ordered by death rate and hostpital name and NAs are removed.
##str(ordered_loop) is a looped series of integers representing the row numbers of the ordered dataframes
if (num == "best") {##if inputted num is "best"...
looped_state_split$Hospital.Name[ordered_loop[1]]##creates a single column dataframe from the first column of ordered_loop
} else if (num == "worst") {
looped_state_split$Hospital.Name[ordered_loop[length(ordered_loop)]]
} else if (is.numeric(num)) {
looped_state_split$Hospital.Name[ordered_loop[num]]## hosptial names ordered rows
} else {
stop("invalid num")
}
}
pre_result <- lapply(state_split, order_and_checker, num) ##lapply passes the list of state_split dataframes, along with the inputted num, to the order_and_checker function
##str(pre_result) is a list of 54 hospitals by state where the rank is equal to the inputted number
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))##dataframe where the first column 'hospital' is the unlisted pre_result, the 2nd column and row names are derived from named attributes (states) in preresult.
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
original_dataframe <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column_namer <- if (outcome == "heart attack") { ##if input is "heart attack", column_namer is assigned to the following...
suppressWarnings(original_dataframe[, 11] <- as.numeric(original_dataframe[, 11]))## the 11th column (heart attack) of original_dataframe is converted to numeric formatting while suppressing NA coersion warnings
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"## column_namer is assigned to the heart attack column heading name
} else if (outcome == "heart failure") {
suppressWarnings(original_dataframe[, 17] <- as.numeric(original_dataframe[, 17]))
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
suppressWarnings(original_dataframe[, 23] <- as.numeric(original_dataframe[, 23]))
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state_split <- split(original_dataframe[, c("Hospital.Name", "State", column_namer)], original_dataframe$State) ##splits the three column subset of original_dataframe by state
##str(state_split) is a list of 54 dataframes divided by state
print((state_split), 1)
order_and_checker <- function(looped_state_split, num) { ##takes a looped state.split dataframe and num from pre_result lapply
##str(looped_state_split) is a looped series of dataframes passed to the order_and_checker function
ordered_loop <- order(looped_state_split[3], looped_state_split$Hospital.Name,  na.last=NA) ## each looped_state_split dataframe is ordered by death rate and hostpital name and NAs are removed.
##str(ordered_loop) is a looped series of integers representing the row numbers of the ordered dataframes
if (num == "best") {##if inputted num is "best"...
looped_state_split$Hospital.Name[ordered_loop[1]]##creates a single column dataframe from the first column of ordered_loop
} else if (num == "worst") {
looped_state_split$Hospital.Name[ordered_loop[length(ordered_loop)]]
} else if (is.numeric(num)) {
looped_state_split$Hospital.Name[ordered_loop[num]]## hosptial names ordered rows
} else {
stop("invalid num")
}
}
pre_result <- lapply(state_split, order_and_checker, num) ##lapply passes the list of state_split dataframes, along with the inputted num, to the order_and_checker function
##str(pre_result) is a list of 54 hospitals by state where the rank is equal to the inputted number
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))##dataframe where the first column 'hospital' is the unlisted pre_result, the 2nd column and row names are derived from named attributes (states) in preresult.
}
head(rankall("heart attack", 20), 10)
print(state_split)
rankall <- function(outcome, num = "best") {
original_dataframe <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column_namer <- if (outcome == "heart attack") { ##if input is "heart attack", column_namer is assigned to the following...
suppressWarnings(original_dataframe[, 11] <- as.numeric(original_dataframe[, 11]))## the 11th column (heart attack) of original_dataframe is converted to numeric formatting while suppressing NA coersion warnings
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"## column_namer is assigned to the heart attack column heading name
} else if (outcome == "heart failure") {
suppressWarnings(original_dataframe[, 17] <- as.numeric(original_dataframe[, 17]))
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
suppressWarnings(original_dataframe[, 23] <- as.numeric(original_dataframe[, 23]))
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state_split <- split(original_dataframe[, c("Hospital.Name", "State", column_namer)], original_dataframe$State) ##splits the three column subset of original_dataframe by state
##str(state_split) is a list of 54 dataframes divided by state
print(state_split)
order_and_checker <- function(looped_state_split, num) { ##takes a looped state.split dataframe and num from pre_result lapply
##str(looped_state_split) is a looped series of dataframes passed to the order_and_checker function
ordered_loop <- order(looped_state_split[3], looped_state_split$Hospital.Name,  na.last=NA) ## each looped_state_split dataframe is ordered by death rate and hostpital name and NAs are removed.
##str(ordered_loop) is a looped series of integers representing the row numbers of the ordered dataframes
if (num == "best") {##if inputted num is "best"...
looped_state_split$Hospital.Name[ordered_loop[1]]##creates a single column dataframe from the first column of ordered_loop
} else if (num == "worst") {
looped_state_split$Hospital.Name[ordered_loop[length(ordered_loop)]]
} else if (is.numeric(num)) {
looped_state_split$Hospital.Name[ordered_loop[num]]## hosptial names ordered rows
} else {
stop("invalid num")
}
}
pre_result <- lapply(state_split, order_and_checker, num) ##lapply passes the list of state_split dataframes, along with the inputted num, to the order_and_checker function
##str(pre_result) is a list of 54 hospitals by state where the rank is equal to the inputted number
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))##dataframe where the first column 'hospital' is the unlisted pre_result, the 2nd column and row names are derived from named attributes (states) in preresult.
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
original_dataframe <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column_namer <- if (outcome == "heart attack") { ##if input is "heart attack", column_namer is assigned to the following...
suppressWarnings(original_dataframe[, 11] <- as.numeric(original_dataframe[, 11]))## the 11th column (heart attack) of original_dataframe is converted to numeric formatting while suppressing NA coersion warnings
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"## column_namer is assigned to the heart attack column heading name
} else if (outcome == "heart failure") {
suppressWarnings(original_dataframe[, 17] <- as.numeric(original_dataframe[, 17]))
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
suppressWarnings(original_dataframe[, 23] <- as.numeric(original_dataframe[, 23]))
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state_split <- split(original_dataframe[, c("Hospital.Name", "State", column_namer)], original_dataframe$State) ##splits the three column subset of original_dataframe by state
str(state_split) is a list of 54 dataframes divided by state
order_and_checker <- function(looped_state_split, num) { ##takes a looped state.split dataframe and num from pre_result lapply
##str(looped_state_split) is a looped series of dataframes passed to the order_and_checker function
ordered_loop <- order(looped_state_split[3], looped_state_split$Hospital.Name,  na.last=NA) ## each looped_state_split dataframe is ordered by death rate and hostpital name and NAs are removed.
##str(ordered_loop) is a looped series of integers representing the row numbers of the ordered dataframes
if (num == "best") {##if inputted num is "best"...
looped_state_split$Hospital.Name[ordered_loop[1]]##creates a single column dataframe from the first column of ordered_loop
} else if (num == "worst") {
looped_state_split$Hospital.Name[ordered_loop[length(ordered_loop)]]
} else if (is.numeric(num)) {
looped_state_split$Hospital.Name[ordered_loop[num]]## hosptial names ordered rows
} else {
stop("invalid num")
}
}
pre_result <- lapply(state_split, order_and_checker, num) ##lapply passes the list of state_split dataframes, along with the inputted num, to the order_and_checker function
##str(pre_result) is a list of 54 hospitals by state where the rank is equal to the inputted number
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))##dataframe where the first column 'hospital' is the unlisted pre_result, the 2nd column and row names are derived from named attributes (states) in preresult.
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
original_dataframe <- read.csv("outcome-of-care-measures.csv", colClasses="character")
column_namer <- if (outcome == "heart attack") { ##if input is "heart attack", column_namer is assigned to the following...
suppressWarnings(original_dataframe[, 11] <- as.numeric(original_dataframe[, 11]))## the 11th column (heart attack) of original_dataframe is converted to numeric formatting while suppressing NA coersion warnings
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"## column_namer is assigned to the heart attack column heading name
} else if (outcome == "heart failure") {
suppressWarnings(original_dataframe[, 17] <- as.numeric(original_dataframe[, 17]))
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
suppressWarnings(original_dataframe[, 23] <- as.numeric(original_dataframe[, 23]))
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("invalid outcome")
}
state_split <- split(original_dataframe[, c("Hospital.Name", "State", column_namer)], original_dataframe$State) ##splits the three column subset of original_dataframe by state
str(state_split)## is a list of 54 dataframes divided by state
order_and_checker <- function(looped_state_split, num) { ##takes a looped state.split dataframe and num from pre_result lapply
##str(looped_state_split) is a looped series of dataframes passed to the order_and_checker function
ordered_loop <- order(looped_state_split[3], looped_state_split$Hospital.Name,  na.last=NA) ## each looped_state_split dataframe is ordered by death rate and hostpital name and NAs are removed.
##str(ordered_loop) is a looped series of integers representing the row numbers of the ordered dataframes
if (num == "best") {##if inputted num is "best"...
looped_state_split$Hospital.Name[ordered_loop[1]]##creates a single column dataframe from the first column of ordered_loop
} else if (num == "worst") {
looped_state_split$Hospital.Name[ordered_loop[length(ordered_loop)]]
} else if (is.numeric(num)) {
looped_state_split$Hospital.Name[ordered_loop[num]]## hosptial names ordered rows
} else {
stop("invalid num")
}
}
pre_result <- lapply(state_split, order_and_checker, num) ##lapply passes the list of state_split dataframes, along with the inputted num, to the order_and_checker function
##str(pre_result) is a list of 54 hospitals by state where the rank is equal to the inputted number
data.frame(hospital = unlist(pre_result), state = names(pre_result), row.names = names(pre_result))##dataframe where the first column 'hospital' is the unlisted pre_result, the 2nd column and row names are derived from named attributes (states) in preresult.
}
head(rankall("heart attack", 20), 10)
df[order(df[3], df$item),]
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(27, 28, 29), 3)
df
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(27, 28, 29)
df
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(27, 28, 29))
df
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3)
df
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3))
df
newdata <- df[order(df[3], df$item),]
df[order(df[3], df$item),]
df[newdata, ]
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3))
newdata <- order(df[3], df$item)
df[newdata, ]
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3))
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3))
df
newdata <- order(df[3], df$item) ##th
df[newdata, ]
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3))
df
dforder <- order(df[, 3], df$item) ##t
df[dforder, ] ##this is the sub
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3))
df
dforder <- order(df[3], df$item) ##
df$count[dforder[1]]
df$item[dforder[1]]
?length
length(df$item)
df$item[dforder[length(dforder)]]
df <- data.frame(item = sample(letters[1:9]),
year = sample(2010:2018),
count = rep(c(27, 28, 29), 3))
df
df$year[dforder[length(dforder)]]
df$item[dforder[length(dforder)]]
df$item[dforder[length(dforder)]]
length(dforder)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
